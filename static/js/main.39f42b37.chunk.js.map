{"version":3,"sources":["utils/WinnerCalculator.js","components/Cell/Cell.js","components/Borad/Board.js","components/ResultModal/ResultModal.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["winningMatrix","0","1","2","3","4","5","6","7","8","Cell","props","cellClasses","classNames","cell","winner","canHighLight","cellContentClasses","populated","value","className","onClick","Board","cells","cellValues","map","index","winningCombination","indexOf","cellClicked","id","ResultModal","resultModalClasses","isGameOver","message","onNewGameClicked","Game","useState","setCellValues","xIsNext","setXIsNext","setIsGameOver","numberOfTurnsLeft","setNumberOfTurnsLeft","setWinner","setWinningCombination","cellIndex","isCellEmpty","newCellValues","newNumberOfTurnsLeft","calcResult","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","console","log","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39f42b37.chunk.js","sourcesContent":["const winningMatrix = {\r\n    0: [[1, 2], [3, 6], [4, 8]],\r\n    1: [[0, 2], [4, 7]],\r\n    2: [[0, 1], [5, 8], [4, 6]],\r\n    3: [[0, 6], [4, 5]],\r\n    4: [[2, 6], [3, 5], [1, 7], [0, 8]],\r\n    5: [[3, 4], [2, 8]],\r\n    6: [[7, 8], [0, 3], [2, 4]],\r\n    7: [[6, 8], [1, 4]],\r\n    8: [[6, 7], [2, 5], [0, 4]]\r\n};\r\n\r\nexport const calculateWinner = (cellValues, numberOfTurnsLeft ,cellIndex) => { \r\n    const winningRanges = winningMatrix[cellIndex];\r\n\r\n    for (let i = 0; i < winningRanges.length; i++){\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n\r\n        if (currentValue === firstOption && firstOption === secondOption) { \r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            };\r\n\r\n        }\r\n    }\r\n\r\n    console.log(numberOfTurnsLeft);\r\n    if (numberOfTurnsLeft === 0) {\r\n        return {\r\n                hasResult: true,\r\n                winner: undefined,\r\n                winningCombination: []\r\n        };\r\n    }\r\n\r\n\r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination:[]\r\n    };\r\n};","import classNames from 'classnames';\r\nimport './Cell.css';\r\n\r\nexport const Cell = (props) => {\r\n    \r\n    const cellClasses = classNames({\r\n        cell: true,\r\n        winner: props.canHighLight\r\n    });\r\n\r\n\r\n    const cellContentClasses = classNames({\r\n        'cell-content': true,\r\n        populated: props.value\r\n    });   \r\n    \r\n\r\n    return (\r\n\r\n        <button className={cellClasses} onClick={props.onClick} >\r\n            <span className={cellContentClasses}>{props.value}</span>\r\n        </button>\r\n\r\n    );\r\n}\r\n","import { Cell } from '../Cell/Cell';\r\nimport './Board.css';\r\n\r\n\r\nexport const Board = (props) => {\r\n\r\n\r\n    const cells = props.cellValues.map((value, index) => {\r\n        const canHighLight = props.winningCombination &&\r\n            props.winningCombination.indexOf(index) >= 0;\r\n\r\n        return <Cell\r\n            key={index}\r\n            value={value}\r\n            canHighLight={canHighLight}\r\n            onClick={() => props.cellClicked(index)} />;\r\n    });\r\n\r\n    return (\r\n\r\n        <div id=\"board\">\r\n            {cells}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n","import './ResultModal.css';\r\nimport classNames from 'classnames';\r\n\r\nexport const ResultModal = (props) => {\r\n\r\n    const resultModalClasses = classNames({\r\n       'modal-open': props.isGameOver\r\n    });\r\n\r\n    const message = props.winner ? `Winner is ${props.winner}.` : 'It is a Tie';\r\n    return (\r\n\r\n            <div id=\"modal-overlay\" className={resultModalClasses} >\r\n                <div id=\"game-result-modal\">\r\n                    <div id=\"result-container\">\r\n                        <div id=\"winner-container\">\r\n                        <span>{message}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"new-game-container\">\r\n                    <button\r\n                        id=\"new-game-button\"\r\n                    onClick={props.onNewGameClicked} >Start New Game</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n}","import { useState } from 'react';\r\nimport { calculateWinner } from '../../utils/WinnerCalculator';\r\nimport { Board } from '../Borad/Board';\r\nimport { ResultModal } from '../ResultModal/ResultModal';\r\nimport './Game.css';\r\n\r\nexport const Game = () => {\r\n\r\n    const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const [numberOfTurnsLeft, setNumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [winningCombination, setWinningCombination] = useState([]);\r\n\r\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === '';\r\n\r\n    const restartGame = () => {\r\n        setCellValues(['', '', '', '', '', '', '', '', '']);\r\n        setXIsNext(true);\r\n        setIsGameOver(false);\r\n        setNumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    };\r\n\r\n\r\n    const onCellClicked = (cellIndex) => {\r\n        if (isCellEmpty(cellIndex)) {\r\n            const newCellValues = [...cellValues];\r\n            newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\r\n\r\n            const newNumberOfTurnsLeft = numberOfTurnsLeft - 1;\r\n\r\n            // Calculate The Result\r\n\r\n            const calcResult = calculateWinner(newCellValues, newNumberOfTurnsLeft, cellIndex);\r\n            setCellValues(newCellValues);\r\n            setXIsNext(!xIsNext);\r\n            setIsGameOver(calcResult.hasResult);\r\n            setNumberOfTurnsLeft(newNumberOfTurnsLeft);\r\n            setWinner(calcResult.winner);\r\n            setWinningCombination(calcResult.winningCombination);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <div id=\"game\">\r\n                <h1>Tic Tac Toe</h1>\r\n                <Board\r\n                    cellValues={cellValues}\r\n                    winningCombination={winningCombination}\r\n                    cellClicked={onCellClicked} />\r\n            </div>\r\n\r\n            <ResultModal\r\n                isGameOver={isGameOver}\r\n                winner={winner}\r\n                onNewGameClicked={restartGame}\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n","\n\nimport { Game } from './components/Game/Game';\n\nfunction App() {\n  return (\n    <>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}